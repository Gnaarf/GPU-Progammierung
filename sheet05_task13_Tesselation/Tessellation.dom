
#version 400

// TODO: Topology, spacing sceme und winding order (counter clock wise) angeben! (layout modifier)
// spacing schemes: fractional_even_spacing, fractional_odd_spacing, equal_spacing -> sucht euch was aus :)
layout(triangles, fractional_even_spacing, cw) in;

// inputs from the hull shader.
in vec3 hs_out_Position[];
in vec3 hs_out_Normal[];
in vec2 hs_out_TexCoord[];

in float debug_hs_out_camDist[];
out float debug_ds_out_camDist;

// output of the domain shader.
out vec3 ds_out_Normal;
out vec2 ds_out_TexCoord;

layout(std140) uniform GlobalMatrices
{
	mat4 Projection;
	mat4 View;
};

layout(std140) uniform TessFactors
{
	float insideTess;
	float outsideTess;
	float alpha;
};

vec3 baryInterpolate(vec3 uvw, vec3 a, vec3 b, vec3 c)
{
	vec3 outgoing = vec3(0,0,0);
	mat3 temp = mat3(a,b,c);
	//outgoing = uvw.x * a + uvw.y * b + uvw.z * c;
	outgoing = temp * uvw;
	return outgoing;
}

vec3 projectPointOntoPlane(vec3 point, vec3 planePos, vec3 planeNormal)
{
	vec3 outgoing = point - dot((point - planePos),planeNormal) * planeNormal;
	return outgoing;
}

void main()
{
	vec3 p = vec3(0,0,0);
	// TODO: Baryzentrische Interpolation zwischen den drei Eckpunkten durchführen, um den Punkt p im Dreieck zu bestimmen.
	vec3 a = hs_out_Position[0];
	vec3 b = hs_out_Position[1];
	vec3 c = hs_out_Position[2];

	vec3 n1 = hs_out_Normal[0];
	vec3 n2 = hs_out_Normal[1];
	vec3 n3 = hs_out_Normal[2];

	p = baryInterpolate(gl_TessCoord, a, b, c);
	
	// TODO: Projektion des Punktes p in die Tangentialebenen der Eckpunkte, wiederum baryzentrische Interpolation zwischen den projizierten Punkten ergibt Punkt q.
	vec3 a1 = projectPointOntoPlane(p,a,n1);
	vec3 b1 = projectPointOntoPlane(p,b,n2);
	vec3 c1 = projectPointOntoPlane(p,c,n3);

	vec3 q = baryInterpolate(gl_TessCoord, a1, b1, c1);

	// TODO: Lineare Interpolation zwischen p und q anhand von alpha ergibt den fertigen Punkt x.
    vec3 pfin = mix(p, q, alpha);

	// TODO: Baryzentrische Interpolation der Texturkoordinaten und Normalen.
	vec3 n = baryInterpolate(gl_TessCoord, n1, n2, n3);
	
	// TODO: Normale in den View Space transformieren.
	vec4 nor = /*transpose(inverse(*/Projection * View * vec4(n,0);
	ds_out_Normal = nor.xyz;
	// TODO: Punkt x in den Clipping Space transformieren und rausreichen.
	gl_Position = Projection * View * vec4(pfin,1);

	debug_ds_out_camDist = debug_hs_out_camDist[0];
}
