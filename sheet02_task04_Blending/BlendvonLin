#include <GL/freeglut.h>

int width = 600;
int height = 600;

float redQuarda = 1.0;
float greenQuarda = 1.0;
float blueQuarda = 1.0;

void keyPressed(unsigned char, int, int);

void drawQuad(float x, float y, float z)
{
	glBegin(GL_QUADS);
	glVertex3f(x,y,z);
	glVertex3f(x+1,y,z);
	glVertex3f(x+1,y+1,z);
	glVertex3f(x,y+1,z);
	glEnd();
}


void display(void)	
{
	glClear(GL_COLOR_BUFFER_BIT);
	//glClearColor(0.0f, 0.0f, 0.0f, 0.5f);

	glLoadIdentity();
	gluLookAt(0, 0, 1, 0, 0, 0, 0, 1, 0);

	glEnable(GL_BLEND);

	glPushAttrib( GL_CURRENT_BIT ); 
	glColor4f(1.0, 0.0, 0.0, redQuarda);
	drawQuad(1, 1, -2);
	glPopAttrib();

	glPushAttrib( GL_CURRENT_BIT );
	glColor4f(0.0, 1.0, 0.0, greenQuarda);
	drawQuad(0.25, 0.75, -1);
	glPopAttrib();

	glPushAttrib( GL_CURRENT_BIT );
	glColor4f(0.0, 0.0, 1.0, blueQuarda);
	drawQuad(0.5, 0.25, 0);
	glPopAttrib();

	glFlush();
}

void keyPressed(unsigned char key, int x, int y)
{
	switch(key)
	{
	case '1':
		glClearColor(0.0f, 0.0f, 0.0f, 1.0f); 
		glBlendFunc(GL_SRC_ALPHA,GL_DST_ALPHA);
		redQuarda = 1.0;
		greenQuarda = 1.0;
		blueQuarda = 1.0;
		break;
	case '2':
		glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
		redQuarda = 0.7;
		greenQuarda = 0.7;
		blueQuarda = 0.7;
		break;
	case '3':
		glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
		glBlendFunc( GL_DST_COLOR, GL_ONE_MINUS_SRC_ALPHA );
		redQuarda = 0.7;
		greenQuarda = 0.7;
		blueQuarda = 0.7;
		break;
	}
}

void idle(void) 
{
	glutPostRedisplay();
}

int main(int argc, char **argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGBA | GLUT_SINGLE);
	glutInitWindowSize(width, height);
	glutCreateWindow("Blending");

	glutDisplayFunc(display);
	glutIdleFunc(idle); 
	glutKeyboardFunc(keyPressed);

	glDisable(GL_DEPTH_TEST);

	glViewport(0,0,width,height);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(0, 2, 0, 2, 0, 100);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	// *** Blending Funktion setzen

	glutMainLoop();
	return 0;
}
